definitions:
  GetArticlesResponse:
    properties:
      author:
        $ref: '#/definitions/domain.Author'
      content:
        type: string
      created_at:
        type: string
      id:
        type: integer
      order:
        description: |-
          Sort order:
          * asc - Ascending, from A to Z.
          * desc - Descending, from Z to A.
        enum:
        - asc
        - desc
        type: string
      title:
        type: string
      updated_at:
        type: string
    required:
    - content
    - title
    type: object
  domain.Author:
    properties:
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
    type: object
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: |-
    This is the first line
    This is the second line
    And so forth.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
paths:
  /articles:
    get:
      consumes:
      - application/json
      description: |-
        This is the first line
        This is the second line
        And so forth.
      parameters:
      - description: Number of articles
        in: query
        name: num
        required: true
        type: integer
      - description: Cursor
        in: query
        name: cursor
        required: true
        type: integer
      - description: string enums
        enum:
        - A
        - B
        - C
        in: query
        name: enumstring
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/GetArticlesResponse'
            type: array
        "400":
          description: ok
          schema:
            type: string
        "404":
          description: ok
          schema:
            type: string
        "500":
          description: ok
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      - OAuth2Implicit:
        - admin
        - write
      summary: fetch article example
      tags:
      - article
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
  BasicAuth:
    type: basic
  OAuth2AccessCode:
    authorizationUrl: https://example.com/oauth/authorize
    flow: accessCode
    scopes:
      admin: ' Grants read and write access to administrative information'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
  OAuth2Application:
    flow: application
    scopes:
      admin: ' Grants read and write access to administrative information'
      write: ' Grants write access'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
  OAuth2Implicit:
    authorizationUrl: https://example.com/oauth/authorize
    flow: implicit
    scopes:
      admin: ' Grants read and write access to administrative information'
      write: ' Grants write access'
    type: oauth2
  OAuth2Password:
    flow: password
    scopes:
      admin: ' Grants read and write access to administrative information'
      read: ' Grants read access'
      write: ' Grants write access'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
swagger: "2.0"
